---
import Container from '@/components/Container.astro'
import TableOfContents from '@/components/blog/TableOfContents.astro'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { type CollectionEntry, getCollection, render } from 'astro:content'

export async function getStaticPaths() {
  const posts = (await getCollection('blog'))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}
type Props = CollectionEntry<'blog'>

const posts = (await getCollection('blog'))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

function getPostIndex(id: string): number {
  return posts.findIndex((post) => post.id === id)
}

const post = Astro.props
const { Content, headings } = await render(post)
---

<Layout title={post.data.title} description={post.data.description} image={post.data.image?.src ?? '/static/twitter-card.webp'}>
  <main class="flex flex-col sm:px-6 lg:px-8 gap-y-6">
    <Container class="flex flex-col p-6 gap-y-6">
      {
        post.data.image && (
          <Image
            src={post.data.image}
            alt={post.data.title}
            width={1200}
            height={630}
            class="object-cover rounded-lg"
          />
        )
      }
  
      <section class="flex flex-col text-center">
        <div>
          <h1 class="mb-2 text-4xl font-bold leading-tight sm:text-5xl">
            {post.data.title}
          </h1>
  
          <div
            class="flex flex-wrap items-center justify-center mb-2 text-sm text-muted-foreground"
          >
            <div class="flex items-center gap-2">
              <Icon name="lucide:calendar" size="16" />
              <span>{formatDate(post.data.date)}</span>
              <Separator orientation="vertical" className="h-2" />
              <Icon name="lucide:clock" size="16" />
              <span>{readingTime(post.body!)}</span>
            </div>
          </div>
        </div>
  
      </section>
    </Container>
    <Container class="flex flex-col gap-y-6 p-6">
      {headings.length > 0 && <TableOfContents headings={headings} />}
  
      <article class="prose prose-invert max-w-none">
        <Content />
      </article>
    </Container>
  
    <Button
      size="icon"
      className="group fixed bottom-8 right-8 z-50 hidden"
      id="scroll-to-top"
      title="Scroll to top"
      aria-label="Scroll to top"
    >
      <Icon
        name="lucide:arrow-up"
        class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
      />
    </Button>
  </main>

  <script>
    document.addEventListener('astro:page-load', () => {
      const scrollToTopButton = document.getElementById('scroll-to-top')
      const footer = document.querySelector('footer')

      if (scrollToTopButton && footer) {
        scrollToTopButton.addEventListener('click', () => {
          window.scrollTo({ top: 0, behavior: 'smooth' })
        })

        window.addEventListener('scroll', () => {
          const footerRect = footer.getBoundingClientRect()
          const isFooterVisible = footerRect.top <= window.innerHeight

          scrollToTopButton.classList.toggle(
            'hidden',
            window.scrollY <= 300 || isFooterVisible,
          )
        })
      }
    })
  </script>
</Layout>
